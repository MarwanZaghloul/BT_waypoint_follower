map_type: costmap
origin_z: 0.0
#need to test both values to get prober voxel grid size
z_resolution: 2.0
z_voxels: 2.0

obstacle_range: 2.5
raytrace_range: 3.0

publish_voxel_map: true
transform_tolerance: 0.7
meter_scoring: true

#footprint: [[-0.21, -0.165], [-0.21, 0.165], [0.21, 0.165], [0.21, -0.165]]
footprint: [[-0.15, -0.10], [-0.15, 0.10], [0.15, 0.10], [0.15, -0.10]]
footprint_padding: 0.1
# Note : the layers arrangment will directly reflect in the data appears in the 
# the visualization and the logic of the resaulting costmap 
# in other words by refiring to the cos map paper the costmap mechanism works as they are stacked 
# above each other so, their arrangment will reflect to the results 
plugins:
- {name: obstacles_layer, type: "costmap_2d::ObstacleLayer"}
#- {name: rgbd_obstacle_layer_camera,type: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"}
- {name: inflater_layer, type: "costmap_2d::InflationLayer"}
   
obstacles_layer:
  observation_sources: scan 
  track_unknown_space: true
  scan: {sensor_frame: os_lidar, data_type: LaserScan, topic: scan, marking: true, clearing: true, min_obstacle_height: 0.1, max_obstacle_height: 2.0, obstacle_range: 4.0, raytrace_range: 5.0}

inflater_layer:
 inflation_radius: 0.08 #1.75
 cost_scaling_factor: 5.0 #2.58


rgbd_obstacle_layer_camera:
  enabled:               true
  voxel_decay:           4    #seconds if linear, e^n if exponential
  decay_model:           0      #0=linear, 1=exponential, -1=persistent
  voxel_size:            0.03   #meters
  track_unknown_space:   true   #default space is unknown
  observation_persistence: 0.0  #seconds
  max_obstacle_height:   2.0    #meters
  unknown_threshold:     15     #voxel height
  mark_threshold:        0     #voxel height
  update_footprint_enabled: true
  combination_method:    1      #1=max, 0=override
  obstacle_range:        1.5    #meters
  origin_z:              0.0    #meters
  publish_voxel_map:     true   # default off
  transform_tolerance:   0.2    # seconds
  mapping_mode:          false  # default off, saves map not for navigation
  map_save_duration:     60     #default 60s, how often to autosave
  observation_sources:   rgbd1_clear rgbd1_mark
  rgbd1_mark:
    data_type: PointCloud2
    topic: /camera/depth/color/points 
    marking: true
    clearing: false
    min_obstacle_height: 0.3     #default 0, meters
    max_obstacle_height: 2.0     #defaule 3, meters
    expected_update_rate: 0.5    #default 0, if not updating at this rate at least, remove from buffer
    observation_persistence: 0.0 #default 0, use all measurements taken during now-value, 0=latest 
    inf_is_valid: false          #default false, for laser scans
    clear_after_reading: true    #default false, clear the buffer after the layer gets readings from it
    filter: "voxel"              #default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommended to have at one filter on
    voxel_min_points:  0         #default 0, minimum points per voxel for voxel filter
  rgbd1_clear:
    enabled: false                #default true, can be toggled on/off with associated service call
    data_type: PointCloud2
    topic: /camera/depth/color/points
    marking: false
    clearing: true
    min_z: 0.1                   #default 0, meters
    max_z: 10.0                   #default 10, meters
    vertical_fov_angle: 0.7      #default 0.7, radians
    horizontal_fov_angle: 1.04   #default 1.04, radians
    decay_acceleration: 1.       #default 0, 1/s^2. If laser scanner MUST be 0
    model_type: 0              #default 0 (depth camera). Use 1 for 3D Lidarr
    